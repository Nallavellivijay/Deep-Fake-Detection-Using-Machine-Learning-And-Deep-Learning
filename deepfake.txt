import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from sklearn.model_selection import train_test_split

# Load pre-trained model (optional: you can use a pre-trained model for transfer learning)
base_model = tf.keras.applications.ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Step 1: Model Architecture
def build_model():
    model = models.Sequential()
    model.add(base_model)
    model.add(layers.GlobalAveragePooling2D())
    model.add(layers.Dense(1024, activation='relu'))
    model.add(layers.Dropout(0.5))
    model.add(layers.Dense(1, activation='sigmoid'))  # binary classification (real/fake)
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Step 2: Data Preprocessing (example using image files)
def preprocess_image(image_path, target_size=(224, 224)):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB
    image = cv2.resize(image, target_size)
    image = np.expand_dims(image, axis=0)  # Add batch dimension
    image = tf.keras.applications.resnet50.preprocess_input(image)  # Preprocess for ResNet50
    return image

# Step 3: Load and Prepare Dataset (Example with Paths)
def load_data(real_image_paths, fake_image_paths):
    real_images = [preprocess_image(path) for path in real_image_paths]
    fake_images = [preprocess_image(path) for path in fake_image_paths]
    
    X = np.array(real_images + fake_images)
    y = np.array([1] * len(real_images) + [0] * len(fake_images))  # 1 for real, 0 for fake
    return train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train the Model
def train_model(X_train, y_train):
    model = build_model()
    model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Step 5: Prediction (Real or Fake)
def predict_image(model, image_path):
    image = preprocess_image(image_path)
    prediction = model.predict(image)
    return "Real" if prediction[0] > 0.5 else "Fake"

# Example Usage
if __name__ == "__main__":
    # Example paths to real and fake images (replace with your dataset)
    real_image_paths = ["path_to_real_image_1.jpg", "path_to_real_image_2.jpg"]
    fake_image_paths = ["path_to_fake_image_1.jpg", "path_to_fake_image_2.jpg"]
    
    # Load data and preprocess
    X_train, X_test, y_train, y_test = load_data(real_image_paths, fake_image_paths)
    
    # Train the model
    model = build_model()
    train_model(X_train, y_train)
    
    # Evaluate the model
    loss, accuracy = model.evaluate(X_test, y_test)
    print(f"Test Accuracy: {accuracy * 100:.2f}%")
    
    # Make a prediction on a new image
    image_path = "path_to_new_image.jpg"
    print(predict_image(model, image_path))
